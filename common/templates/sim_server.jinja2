#!/usr/bin/env python2
# Autogenerated hardware simulation server.
#
# Lists on a socket port and performs the appropriate exchange to implement
# hardware reading and writing.

try:
    from pkg_resources import require
    require('numpy')
except ImportError:
    pass

import argparse
import os
import sys

parser = argparse.ArgumentParser(description='PandA Hardware simulation')
parser.add_argument(
    '-d', '--daemon', action='store_true', help='Run as daemon process')
parser.add_argument(
    '-v', '--verbose', action='store_true', help='Log register access')
args = parser.parse_args()

# Import from the simulation module to do the work
sys.path.append(os.path.join(os.path.dirname(__file__), "..", "..", "..", ".."))
from common.python.simulations import \
    SimulationController, SimulationServer, daemonise

# Create as much of the controller before we daemonise so that errors can be
# caught if possible at this stage.
controller = SimulationController(args.verbose)
{% for block in fpga_blocks %}
controller.create_block("{{ block.ini_path }}", {{ block.number }}, {{ block.block_address }})
{% endfor %}
server = SimulationServer(controller)

print 'Simulating server ready'
if args.daemon:
    daemonise()

# now we can start the simulation ticking
server.run()
